x <- 11
x
y <- 3
x+y
xÅ·
x^y
pow(x,y)
x//y
x/y
x%%y
data("iris")
View("iris")
data(iris)
View(iris)
library()
old.packages()
update.packages()
y
install.packages("devtools")
old.packages()
update.packages()
cube <- function(x, n){}
cube <- function(x, n){x^3}
cune(3)
cube(3)
x + g(x)
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 1:10
if(x>5){x<-0}
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length())
lapply(unique_vals, length
)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
help("gl")
gl(3,10)
gl(3,"a")
gl(3,10, labels=c("a","b","c")
)
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
load(iris)
data("iris")
?iris
tapply(iris$virginica, mean)
tapply(iris$Sepal.Length, mean)
iris
split(iris, iris$Species)
apply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species)[,Sepal.Length], mean)
lapply(split(iris, iris$Species)[,"Sepal.Length"], mean)
lapply(split(iris, iris$Species)[,4], mean)
split(iris, iris$Species)-----4virginica
split(iris, iris$Species)$virginica
tapply(split(iris, iris$Species)$virginica, mean)
tapply(split(iris, iris$Species)$virginica[,1], mean)
split(iris, iris$Species)$virginica[,1]
split(iris, iris$Species)$virginica$Sepal.Length
Sep_L <- split(iris, iris$Species)$virginica$Sepal.Length
apply(Sep_L, mean)
apply(Sep_L, function(x) mean(x))
lapply(Sep_L, mean)
sapply(Sep_L, mean)
class(Sep_L)
Sep_L[1:2]
mean(Sep_L)
round(mean(Sep_L))
apply(Sep_L, 1, mean)
apply(Sep_L, 2, mean)
rowMeans(iris[,1:4])
colMeans(iris)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[,1:4], 2, mean)
apply(iris[,1:4], 1, mean)
library(mtcars)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
sapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
avg <- tapply(mtcars$hp, mtcars$cyl, mean)
avg
abs(avg["8"]-avg["4"])
round(abs(avg["8"]-avg["4"]))
debug(ls)
ls
debug
quit()
s
x
n#
nc
1+2
Q
Q
debug(ls)
Q
Q
getwd()
setwd("~Dropbox/Coding/R/ProgrammingAssignment2")
setwd("~Dropbox/Coding/R")
setwd("~/Dropbox/Coding/R/ProgrammingAssignment2")
getwd()
source("cachematrix.R")
makeCacheMatrix(matrix(1,2,3,4))
a <- makeCacheMatrix(matrix(1,2,3,4))
a
a$get()
m <- matrix(1:6, nrow=2, ncol=3)
m
a <- makeCacheMatrix(m)
a
a$get()
a$set(1:2)
a$get()
a$getInv()
?solve
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
solve(A)
solve(A) == inv(A)
inv(a)
source("cachematrix.R")
A <- matrix( c(5, 1, 0,
3,-1, 2,
4, 0,-1), nrow=3, byrow=TRUE)
A$getInv
A$getInv()
B <- makeCacheMatrix(A)
B$getInv
cacheSolve(B)
B$getInv()
B$get()
cacheSolve(B)
B$getInv()
B$getInv
B$setInv()
B$getInv
source("cachematrix.R")
B <- makeCacheMatrix(A)
cacheSolve(B)
B$getInv()
cacheSolve(B)
source("cachematrix.R")
B <- makeCacheMatrix(A)
cacheSolve(B)
source("cachematrix.R")
B <- makeCacheMatrix(A)
cacheSolve(B)
B$get()
InvB <- B$getInv()
InvB
B %*% InvB
B$get() %*% InvB
